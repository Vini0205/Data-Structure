
class Node {
    int data;
    Node next;

    Node(int value) {
        data = value;
        next = null;
    }
}

class SinglyLinkedList {
    Node head;

    void insertAtHead(int value) {
        Node newNode = new Node(value);
        newNode.next = head;
        head = newNode;
    }

    void insertAtTail(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    void deleteByValue(int value) {
        if (head == null) return;
        if (head.data == value) {
            head = head.next;
            return;
        }
        Node temp = head;
        while (temp.next != null && temp.next.data != value) {
            temp = temp.next;
        }
        if (temp.next != null) {
            temp.next = temp.next.next;
        }
    }

    void traverseForward() {
        Node temp = head;
        System.out.print("Singly Linked List (Forward): ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}

class DNode {
    String data;
    DNode next, prev;

    DNode(String value) {
        data = value;
        next = null;
        prev = null;
    }
}

class DoublyLinkedList {
    DNode head, tail;

    void insertAtTail(String value) {
        DNode newNode = new DNode(value);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        newNode.prev = tail;
        tail = newNode;
    }

    void deleteByValue(String value) {
        DNode temp = head;
        while (temp != null && !temp.data.equals(value)) {
            temp = temp.next;
        }
        if (temp == null) return; // not found
        if (temp.prev != null) temp.prev.next = temp.next;
        else head = temp.next; // deleting head
        if (temp.next != null) temp.next.prev = temp.prev;
        else tail = temp.prev; // deleting tail
    }

    void traverseForward() {
        DNode temp = head;
        System.out.print("Playlist (Forward): ");
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    void traverseBackward() {
        DNode temp = tail;
        System.out.print("Playlist (Backward): ");
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.prev;
        }
        System.out.println("START");
    }
}

public class LinkedListDemo {
    public static void main(String[] args) {
        // Test Singly Linked List
        SinglyLinkedList sList = new SinglyLinkedList();
        sList.insertAtHead(10);
        sList.insertAtHead(20);
        sList.insertAtTail(30);
        sList.insertAtTail(40);
        sList.traverseForward();
        sList.deleteByValue(20);
        sList.traverseForward();

        DoublyLinkedList playlist = new DoublyLinkedList();
        playlist.insertAtTail("Song A");
        playlist.insertAtTail("Song B");
        playlist.insertAtTail("Song C");
        playlist.traverseForward();
        playlist.traverseBackward();
        playlist.deleteByValue("Song B");
        playlist.traverseForward();
        playlist.traverseBackward();
    }
}
